local cac = require(game:GetService("Players").LocalPlayer.PlayerGui.Main.UIController.Inventory)
local Inventory = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("getInventory")
local Items = {}
local RarityLevels = {"Mythical", "Legendary", "Rare", "Uncommon", "Common"}
local RarityColors = {
    ["Common"] = Color3.fromRGB(179, 179, 179),
    ["Uncommon"] = Color3.fromRGB(92, 140, 211),
    ["Rare"] = Color3.fromRGB(140, 82, 255),
    ["Legendary"] = Color3.fromRGB(213, 43, 228),
    ["Mythical"] = Color3.fromRGB(238, 47, 50)
}

-- Helper function to get rarity from color
local function GetRarity(color)
    for k, v in pairs(RarityColors) do
        if v == color then return k end
    end
end

-- Organize inventory items by their names
for k, v in pairs(Inventory) do
    Items[v.Name] = v
end

-- Store all items in categories
local allItems = {
    Sword = {},
    Coat = {},
    Accessory = {},
    BloxFruit = {},
    Material = {}
}

local total = #getupvalue(cac.UpdateRender, 4)
local processedItems = {}
local currentCount = 0
while currentCount < total do
    local scrollPosition = 0
    while scrollPosition < 25000 and currentCount < total do
        game:GetService("Players").LocalPlayer.PlayerGui.Main.InventoryContainer.Right.Content.ScrollingFrame.CanvasPosition = Vector2.new(0, scrollPosition)
        for _, v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Main.InventoryContainer.Right.Content.ScrollingFrame.Frame:GetChildren()) do
            if v:IsA("Frame") and not processedItems[v.ItemName.Text] and v.ItemName.Visible then
                local rarity = GetRarity(v.Background.BackgroundColor3)
                local itemType = v.ItemLine2.Text

                if rarity and allItems[itemType] then
                    if not allItems[itemType][rarity] then
                        allItems[itemType][rarity] = {}
                    end
                    table.insert(allItems[itemType][rarity], v:Clone())
                end
                currentCount = currentCount + 1
                processedItems[v.ItemName.Text] = true
            end
        end
        scrollPosition = scrollPosition + 20
    end
    wait()
end

-- UI creation
local function CreateCategoryFrame(parent, itemsByRarity, categoryName)
    local categoryFrame = Instance.new("Frame", parent)
    categoryFrame.BackgroundTransparency = 1
    categoryFrame.Size = UDim2.new(1, 0, 0, 0)
    categoryFrame.AutomaticSize = Enum.AutomaticSize.Y

    local gridLayout = Instance.new("UIGridLayout", categoryFrame)
    gridLayout.CellPadding = UDim2.new(0.002, 0, 0.002, 0)
    gridLayout.CellSize = UDim2.new(0, 50, 0, 50) -- Adjusted size for better visibility
    gridLayout.FillDirectionMaxCells = 8 -- Maximum items per row
    gridLayout.FillDirection = Enum.FillDirection.Horizontal

    for _, rarity in ipairs(RarityLevels) do
        if itemsByRarity[rarity] then
            for _, item in pairs(itemsByRarity[rarity]) do
                item.Parent = categoryFrame
            end
        end
    end
    return categoryFrame
end

-- Create main UI containers
local Left = Instance.new("Frame", game.Players.LocalPlayer.PlayerGui.BubbleChat)
Left.BackgroundTransparency = 1
Left.Size = UDim2.new(0.5, 0, 1, 0)
Left.Name = "Left"

local Right = Instance.new("Frame", game.Players.LocalPlayer.PlayerGui.BubbleChat)
Right.BackgroundTransparency = 1
Right.Size = UDim2.new(0.5, 0, 1, 0)
Right.Position = UDim2.new(0.5, 0, 0, 0)
Right.Name = "Right"

local layoutLeft = Instance.new("UIListLayout", Left)
layoutLeft.SortOrder = Enum.SortOrder.LayoutOrder
layoutLeft.Padding = UDim.new(0, 10)

local layoutRight = layoutLeft:Clone()
layoutRight.Parent = Right

-- Add items to the Left frame (e.g., swords, coats)
CreateCategoryFrame(Left, allItems["Sword"], "Sword")
CreateCategoryFrame(Left, allItems["Coat"], "Coat")

-- Add items to the Right frame (e.g., fruits, accessories, materials)
CreateCategoryFrame(Right, allItems["BloxFruit"], "BloxFruit")
CreateCategoryFrame(Right, allItems["Accessory"], "Accessory")
CreateCategoryFrame(Right, allItems["Material"], "Material")
